name: Multi Search and Replace v.7
on:
  workflow_dispatch:
    inputs:
      search_phrases:
        description: 'Pipe-separated list of phrases to search for'
        required: true
      replace_phrases:
        description: 'Pipe-separated list of phrases to replace with'
        required: true
      file_name_contains:
        description: 'Logic for file name selection, can use pipe and or plus sign (optional)'
        required: false
        default: ''
permissions:
  contents: write
jobs:
  search_and_replace:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Search & Replace and Commit Changes
        env:
          SEARCH_PHRASES: ${{ github.event.inputs.search_phrases }}
          REPLACE_PHRASES: ${{ github.event.inputs.replace_phrases }}
          FILE_NAME_CONTAINS: ${{ github.event.inputs.file_name_contains }}
        run: |
          # Print operation summary
          echo "=== Search and Replace Operation Summary ==="
          echo "Timestamp: $(date +'%Y-%m-%d %H:%M:%S')"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo -e "\n=== Input Parameters ==="
          echo "Search phrases:"
          IFS='|' read -r -a SEARCH_ARRAY <<< "${SEARCH_PHRASES}"
          for phrase in "${SEARCH_ARRAY[@]}"; do
            echo "  - '$phrase'"
          done
          
          echo -e "\nReplace phrases:"
          IFS='|' read -r -a REPLACE_ARRAY <<< "${REPLACE_PHRASES}"
          for phrase in "${REPLACE_ARRAY[@]}"; do
            echo "  - '$phrase'"
          done

          # Validate search and replace arrays
          if [ "${#SEARCH_ARRAY[@]}" -ne "${#REPLACE_ARRAY[@]}" ]; then
            echo -e "\n‚ùå Error: Mismatch in number of search & replace phrases."
            echo "Search phrases: ${#SEARCH_ARRAY[@]}"
            echo "Replace phrases: ${#REPLACE_ARRAY[@]}"
            exit 1
          fi

          # Print initial debug info          
          echo -e "\n=== Input Parameters ==="
          echo "File filter pattern: ${FILE_NAME_CONTAINS:-'(no filter, all HTML files)'}"
          
          MATCHING_FILES=()
          if [ -z "$FILE_NAME_CONTAINS" ]; then
            echo "No filter provided - searching all HTML files"
            MATCHING_FILES=($(find . -type f -name "*.html" 2>/dev/null || echo ""))
          else
            echo -e "\nProcessing filter patterns..."
            # Create an array for filename filtering patterns
            IFS='|' read -r -a OR_PATTERNS <<< "${FILE_NAME_CONTAINS}"
            
            for OR_PATTERN in "${OR_PATTERNS[@]}"; do
              echo "Processing OR pattern: '$OR_PATTERN'"
              IFS='+' read -r -a AND_SEGMENTS <<< "${OR_PATTERN}"
              
              # Build find command for this pattern
              FIND_CMD="find . -type f -name '*.html'"
              for SEGMENT in "${AND_SEGMENTS[@]}"; do
                FIND_CMD="$FIND_CMD -and -name '*${SEGMENT}*'"
              done
              
              echo "Executing find command: $FIND_CMD"
              # Execute the find command and store results
              while IFS= read -r file; do
                if [ -n "$file" ]; then
                  MATCHING_FILES+=("$file")
                fi
              done < <(eval "$FIND_CMD" 2>/dev/null || echo "")
            done
          fi
          
          # Remove duplicates and empty entries
          if [ ${#MATCHING_FILES[@]} -gt 0 ]; then
            MATCHING_FILES=($(printf "%s\n" "${MATCHING_FILES[@]}" | sort -u))
          fi
          
          echo -e "\n=== Search Results ==="
          echo "Total matching files found: ${#MATCHING_FILES[@]}"
          
          if [ ${#MATCHING_FILES[@]} -eq 0 ]; then
            echo "‚ùå No matching HTML files found."
            echo "Debug information:"
            echo "1. Current directory contains:"
            ls -la
            echo "2. All HTML files in repository:"
            find . -type f -name "*.html"
            exit 0
          fi
          
          echo "Files to process:"
          for FILE in "${MATCHING_FILES[@]}"; do
            echo "  - $FILE"
          done
          
          # Perform search and replace
          MODIFIED_FILES=0
          for FILE in "${MATCHING_FILES[@]}"; do
            if [[ -f "$FILE" && "$FILE" == *.html ]]; then
              echo -e "\nProcessing: $FILE"
              FILE_MODIFIED=0
              for i in "${!SEARCH_ARRAY[@]}"; do
                if grep -q "${SEARCH_ARRAY[$i]}" "$FILE"; then
                  sed -i "s|$(printf '%s\n' "${SEARCH_ARRAY[$i]}" | sed 's:[\\/&]:\\&:g')|$(printf '%s\n' "${REPLACE_ARRAY[$i]}" | sed 's:[\\/&]:\\&:g')|g" "$FILE"
                  echo "  ‚úì Replaced '${SEARCH_ARRAY[$i]}' with '${REPLACE_ARRAY[$i]}'"
                  FILE_MODIFIED=1
                fi
              done
              if [ $FILE_MODIFIED -eq 1 ]; then
                ((MODIFIED_FILES++))
              fi
            fi
          done
          
          echo -e "\n=== Operation Complete ==="
          echo "Files processed: ${#MATCHING_FILES[@]}"
          echo "Files modified: $MODIFIED_FILES"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo -e "\nüìù No changes to commit"
            exit 0
          fi
          
          echo -e "\nüìù Committing changes..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Batch replace on $(date +'%Y-%m-%d') - Modified $MODIFIED_FILES files"
          echo "‚úÖ Changes committed successfully"
      
      - name: Push changes
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          echo "üöÄ Pushing changes to repository..."
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }} HEAD:main
          echo "‚úÖ Changes pushed successfully"